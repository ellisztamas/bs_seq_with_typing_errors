# Script to go through each read in a SAM file and extract the how many cytosines
# on each read are not converted.
#
# These counted in bins of 0.01 between zero and one.
# Tom Ellis, 20th October 2023

import argparse
import pandas as pd
import numpy as np

import epiclinestools as epi

# Parameters
parser = argparse.ArgumentParser(description = 'Parse parameters ')
parser.add_argument('-i', '--input', help = 'A sorted SAM file generated by Bismark', required = True)
parser.add_argument('-o', '--output', help = 'Path to a CSV file to store the cytosine counts', required = True)
args = parser.parse_args()

sam = epi.read_SAM(
    args.input
)

# Split the space between zero and one into evenly spaced bins
n_bins = 102
bins = np.linspace(-0.01,1, n_bins)

# Dictionaries to store counts of methylated and unmethylated cytosines
methylation_quantile = {
    'OT'   : np.zeros(n_bins),
    'CTOT' : np.zeros(n_bins),
    'CTOB' : np.zeros(n_bins),
    'OB'   : np.zeros(n_bins)
}

# Find the location of each (un)methylated cytosine in each read, and update the 
# position in the dictionaries
for read in sam:
    # Methylated cytosines
    n_methylated    = np.sum([l.isupper() for l in read.xm_tag])
    n_unmethylated  = np.sum([l.islower() for l in read.xm_tag])
    # If there is at least one cytosine, calculate mean methylation on the read and append the bin
    if (n_methylated + n_unmethylated) > 5:
        mean_methylated = float(n_methylated) / (n_methylated + n_unmethylated)
        ix = np.digitize(mean_methylated, bins, right=True)-1
        methylation_quantile[read.strand][ix] += 1

pd.DataFrame(methylation_quantile).to_csv(args.output)