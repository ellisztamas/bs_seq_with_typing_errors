"""
Remove reads from a SAM file that where every cytosine appears methylated.

Reads aligned with Bismark have an XM tag indicating whether a nucleotide is
non-cytosine (indicating as a '.'), a methylated cytosine (upper case letter) or
unmethylated (lower case letters). Reads in which every letter is upper case are
discarded; all other reads are kept.

Parameters
==========
input: SAM file
    SAM file of reads that have been aligned using Bismark. By default Bismark
    creates BAM files; convert them with `samtools view`
output: str
    Path to directory to save reads with less than 100% methylation
dubious: str
    Path to directory to save reads with 100% methylation.

Return
======

"""

import argparse
import epiclinestools as epi

# Parameters
parser = argparse.ArgumentParser(description = 'Parse parameters')
parser.add_argument('-i', '--input', help = 'A sorted SAM file generated by Bismark', required = True)
parser.add_argument('-o', '--output', help = 'Output file for reads to keep', required = True)
parser.add_argument('-d', '--discard', help = 'Output file for reads to be discarded')

args = parser.parse_args()

# Import samfile line by line
reads = [line.split("\t") for line in open(args.input, "r").read().split("\n")]
print(args.input)
print("File has {} lines".format( len(reads)) )
# Pull out header information
header = [read for read in reads if read[0].startswith('@')]
header = ['\t'.join(read) + '\n' for read in header]
# Keep reads if they are not empty and do not start with '@'
reads = [read for read in reads if (read != ['']) & ( read[0].startswith("@") is False ) ]

# Create output files
outfile_keep    = open(args.output, 'w')
outfile_discard = open(args.discard, 'w')
# Write the SAM header
outfile_keep.writelines(header)
outfile_discard.writelines(header)

n_pairs_kept = 0
n_pairs_discarded = 0
for i in range(len(reads)):
    this_read = epi.BismarkSam(reads[i])
    count_mC  = this_read.count_mC()
    total_reads_on_C = count_mC[0] + count_mC[1]

    # The read should be discarded if there is at least one cytosine and all are methylated.
    discard_read = ( total_reads_on_C > 0 ) and (count_mC[0] == total_reads_on_C)

    if discard_read:
        outfile_discard.write( '\t'.join(reads[i]  ) + '\n')
        n_pairs_discarded += 1
    else:
        outfile_keep.write( '\t'.join(reads[i]  ) + '\n')
        n_pairs_kept += 1

outfile_keep.close()
outfile_discard.close()

print("{} pairs kept.".format(n_pairs_kept) )
print("{} pairs discarded.".format(n_pairs_discarded) )